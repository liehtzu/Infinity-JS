// SF-Gamma.mjs
// ----------------------------------------------------------------------------
// Copyright (C) 2007 Brian Gough
// Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2004 Gerard Jungman
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// ----------------------------------------------------------------------------

// Author:  G. Jungman
// Adaptation to JavaScript: Igor Izvarin

import { GSL_DBL_EPSILON } from "./SF-Machine.mjs";
import { GSL_DBL_MIN }     from "./SF-Machine.mjs";
import { GSL_LOG_DBL_MIN } from "./SF-Machine.mjs";
import { GSL_DBL_MAX }     from "./SF-Machine.mjs";
import { GSL_LOG_DBL_MAX } from "./SF-Machine.mjs";
import { GSL_ROOT4_DBL_EPSILON } from "./SF-Machine.mjs";
import { M_PI }            from "./SF-Math.mjs";
import { M_LN2 }           from "./SF-Math.mjs";
import { M_LNPI }          from "./SF-Math.mjs";
import { M_E }             from "./SF-Math.mjs";
import { M_SQRT2 }         from "./SF-Math.mjs";
import { M_SQRTPI }        from "./SF-Math.mjs";
import { GSL_SIGN }        from "./SF-Math.mjs";
import { GSL_IS_EVEN }     from "./SF-Math.mjs";
import { GSL_IS_ODD }      from "./SF-Math.mjs";
import { gsl_sf_psi_int_e }      from "./SF-Psi.mjs";
import { gsl_sf_psi_1_int_e }    from "./SF-Psi.mjs";
import { gsl_sf_psi_n_e }        from "./SF-Psi.mjs";
import { gsl_sf_exp_err_e }      from "./SF-Exponential.mjs";
import { gsl_sf_exp_mult_err_e } from "./SF-Exponential.mjs";
import { cheb_eval_e }           from "./SF-Chebyshev.mjs";
import { gsl_sf_angle_restrict_symm_e } from "./SF-Trigonometric.mjs";
import { gsl_sf_angle_restrict_symm_err_e } from "./SF-Trigonometric.mjs";
import { gsl_sf_complex_logsin_e } from "./SF-Trigonometric.mjs";
import { gsl_sf_complex_log_e } from "./SF-Logarithmic.mjs";

import { EVAL_RESULT_I }        from "./SF-Evaluate.mjs";
import { EVAL_RESULT_II }       from "./SF-Evaluate.mjs";
import { EVAL_RESULT_ID }       from "./SF-Evaluate.mjs";
import { EVAL_RESULT_D }        from "./SF-Evaluate.mjs";

const INT_MIN = -2147483648;

export const GSL_SF_GAMMA_XMAX = 171.0;

const LogRootTwoPi = 0.9189385332046727418;

// The maximum n such that gsl_sf_fact(n) does not give an overflow.
const GSL_SF_FACT_NMAX = 170;

// The maximum n such that gsl_sf_doublefact(n) does not give an overflow.
const GSL_SF_DOUBLEFACT_NMAX = 297;

// *-*-*-*-*-*-*-*-*-*-*-* Private Section *-*-*-*-*-*-*-*-*-*-*-*

const fact_table =
    [
    { n: 0,  f: 1.0,     i: 1     },
    { n: 1,  f: 1.0,     i: 1     },
    { n: 2,  f: 2.0,     i: 2     },
    { n: 3,  f: 6.0,     i: 6     },
    { n: 4,  f: 24.0,    i: 24    },
    { n: 5,  f: 120.0,   i: 120   },
    { n: 6,  f: 720.0,   i: 720   },
    { n: 7,  f: 5040.0,  i: 5040  },
    { n: 8,  f: 40320.0, i: 40320 },

    { n: 9,  f: 362880.0,     i: 362880    },
    { n: 10, f: 3628800.0,    i: 3628800   },
    { n: 11, f: 39916800.0,   i: 39916800  },
    { n: 12, f: 479001600.0,  i: 479001600 },

    { n: 13, f: 6227020800.0,                               i: 0 },
    { n: 14, f: 87178291200.0,                              i: 0 },
    { n: 15, f: 1307674368000.0,                            i: 0 },
    { n: 16, f: 20922789888000.0,                           i: 0 },
    { n: 17, f: 355687428096000.0,                          i: 0 },
    { n: 18, f: 6402373705728000.0,                         i: 0 },
    { n: 19, f: 121645100408832000.0,                       i: 0 },
    { n: 20, f: 2432902008176640000.0,                      i: 0 },
    { n: 21, f: 51090942171709440000.0,                     i: 0 },
    { n: 22, f: 1124000727777607680000.0,                   i: 0 },
    { n: 23, f: 25852016738884976640000.0,                  i: 0 },
    { n: 24, f: 620448401733239439360000.0,                 i: 0 },
    { n: 25, f: 15511210043330985984000000.0,               i: 0 },
    { n: 26, f: 403291461126605635584000000.0,              i: 0 },
    { n: 27, f: 10888869450418352160768000000.0,            i: 0 },
    { n: 28, f: 304888344611713860501504000000.0,           i: 0 },
    { n: 29, f: 8841761993739701954543616000000.0,          i: 0 },
    { n: 30, f: 265252859812191058636308480000000.0,        i: 0 },
    { n: 31, f: 8222838654177922817725562880000000.0,       i: 0 },
    { n: 32, f: 263130836933693530167218012160000000.0,     i: 0 },
    { n: 33, f: 8683317618811886495518194401280000000.0,    i: 0 },
    { n: 34, f: 2.95232799039604140847618609644e38,  i: 0 },
    { n: 35, f: 1.03331479663861449296666513375e40,  i: 0 },
    { n: 36, f: 3.71993326789901217467999448151e41,  i: 0 },
    { n: 37, f: 1.37637530912263450463159795816e43,  i: 0 },
    { n: 38, f: 5.23022617466601111760007224100e44,  i: 0 },
    { n: 39, f: 2.03978820811974433586402817399e46,  i: 0 },
    { n: 40, f: 8.15915283247897734345611269600e47,  i: 0 },
    { n: 41, f: 3.34525266131638071081700620534e49,  i: 0 },
    { n: 42, f: 1.40500611775287989854314260624e51,  i: 0 },
    { n: 43, f: 6.04152630633738356373551320685e52,  i: 0 },
    { n: 44, f: 2.65827157478844876804362581101e54,  i: 0 },
    { n: 45, f: 1.19622220865480194561963161496e56,  i: 0 },
    { n: 46, f: 5.50262215981208894985030542880e57,  i: 0 },
    { n: 47, f: 2.58623241511168180642964355154e59,  i: 0 },
    { n: 48, f: 1.24139155925360726708622890474e61,  i: 0 },
    { n: 49, f: 6.08281864034267560872252163321e62,  i: 0 },
    { n: 50, f: 3.04140932017133780436126081661e64,  i: 0 },
    { n: 51, f: 1.55111875328738228022424301647e66,  i: 0 },
    { n: 52, f: 8.06581751709438785716606368564e67,  i: 0 },
    { n: 53, f: 4.27488328406002556429801375339e69,  i: 0 },
    { n: 54, f: 2.30843697339241380472092742683e71,  i: 0 },
    { n: 55, f: 1.26964033536582759259651008476e73,  i: 0 },
    { n: 56, f: 7.10998587804863451854045647464e74,  i: 0 },
    { n: 57, f: 4.05269195048772167556806019054e76,  i: 0 },
    { n: 58, f: 2.35056133128287857182947491052e78,  i: 0 },
    { n: 59, f: 1.38683118545689835737939019720e80,  i: 0 },
    { n: 60, f: 8.32098711274139014427634118320e81,  i: 0 },
    { n: 61, f: 5.07580213877224798800856812177e83,  i: 0 },
    { n: 62, f: 3.14699732603879375256531223550e85,  i: 0 },
    { n: 63, f: 1.982608315404440064116146708360e87,  i: 0 },
    { n: 64, f: 1.268869321858841641034333893350e89,  i: 0 },
    { n: 65, f: 8.247650592082470666723170306800e90,  i: 0 },
    { n: 66, f: 5.443449390774430640037292402480e92,  i: 0 },
    { n: 67, f: 3.647111091818868528824985909660e94,  i: 0 },
    { n: 68, f: 2.480035542436830599600990418570e96,  i: 0 },
    { n: 69, f: 1.711224524281413113724683388810e98,  i: 0 },
    { n: 70, f: 1.197857166996989179607278372170e100,  i: 0 },
    { n: 71, f: 8.504785885678623175211676442400e101,  i: 0 },
    { n: 72, f: 6.123445837688608686152407038530e103,  i: 0 },
    { n: 73, f: 4.470115461512684340891257138130e105,  i: 0 },
    { n: 74, f: 3.307885441519386412259530282210e107,  i: 0 },
    { n: 75, f: 2.480914081139539809194647711660e109,  i: 0 },
    { n: 76, f: 1.885494701666050254987932260860e111,  i: 0 },
    { n: 77, f: 1.451830920282858696340707840860e113,  i: 0 },
    { n: 78, f: 1.132428117820629783145752115870e115,  i: 0 },
    { n: 79, f: 8.946182130782975286851441715400e116,  i: 0 },
    { n: 80, f: 7.156945704626380229481153372320e118,  i: 0 },
    { n: 81, f: 5.797126020747367985879734231580e120,  i: 0 },
    { n: 82, f: 4.753643337012841748421382069890e122,  i: 0 },
    { n: 83, f: 3.945523969720658651189747118010e124,  i: 0 },
    { n: 84, f: 3.314240134565353266999387579130e126,  i: 0 },
    { n: 85, f: 2.817104114380550276949479442260e128,  i: 0 },
    { n: 86, f: 2.422709538367273238176552320340e130,  i: 0 },
    { n: 87, f: 2.107757298379527717213600518700e132,  i: 0 },
    { n: 88, f: 1.854826422573984391147968456460e134,  i: 0 },
    { n: 89, f: 1.650795516090846108121691926250e136,  i: 0 },
    { n: 90, f: 1.485715964481761497309522733620e138,  i: 0 },
    { n: 91, f: 1.352001527678402962551665687590e140,  i: 0 },
    { n: 92, f: 1.243841405464130725547532432590e142,  i: 0 },
    { n: 93, f: 1.156772507081641574759205162310e144,  i: 0 },
    { n: 94, f: 1.087366156656743080273652852570e146,  i: 0 },
    { n: 95, f: 1.032997848823905926259970209940e148,  i: 0 },
    { n: 96, f: 9.916779348709496892095714015400e149,  i: 0 },
    { n: 97, f: 9.619275968248211985332842594960e151,  i: 0 },
    { n: 98, f: 9.426890448883247745626185743100e153,  i: 0 },
    { n: 99, f: 9.332621544394415268169923885600e155,  i: 0 },
    { n: 100, f: 9.33262154439441526816992388563e157,  i: 0 },
    { n: 101, f: 9.42594775983835942085162312450e159,  i: 0 },
    { n: 102, f: 9.61446671503512660926865558700e161,  i: 0 },
    { n: 103, f: 9.90290071648618040754671525458e163,  i: 0 },
    { n: 104, f: 1.02990167451456276238485838648e166,  i: 0 },
    { n: 105, f: 1.08139675824029090050410130580e168,  i: 0 },
    { n: 106, f: 1.146280563734708354534347384148e170,  i: 0 },
    { n: 107, f: 1.226520203196137939351751701040e172,  i: 0 },
    { n: 108, f: 1.324641819451828974499891837120e174,  i: 0 },
    { n: 109, f: 1.443859583202493582204882102460e176,  i: 0 },
    { n: 110, f: 1.588245541522742940425370312710e178,  i: 0 },
    { n: 111, f: 1.762952551090244663872161047110e180,  i: 0 },
    { n: 112, f: 1.974506857221074023536820372760e182,  i: 0 },
    { n: 113, f: 2.231192748659813646596607021220e184,  i: 0 },
    { n: 114, f: 2.543559733472187557120132004190e186,  i: 0 },
    { n: 115, f: 2.925093693493015690688151804820e188,  i: 0 },
    { n: 116, f: 3.393108684451898201198256093590e190,  i: 0 },
    { n: 117, f: 3.96993716080872089540195962950e192,  i: 0 },
    { n: 118, f: 4.68452584975429065657431236281e194,  i: 0 },
    { n: 119, f: 5.57458576120760588132343171174e196,  i: 0 },
    { n: 120, f: 6.68950291344912705758811805409e198,  i: 0 },
    { n: 121, f: 8.09429852527344373968162284545e200,  i: 0 },
    { n: 122, f: 9.87504420083360136241157987140e202,  i: 0 },
    { n: 123, f: 1.21463043670253296757662432419e205,  i: 0 },
    { n: 124, f: 1.50614174151114087979501416199e207,  i: 0 },
    { n: 125, f: 1.88267717688892609974376770249e209,  i: 0 },
    { n: 126, f: 2.37217324288004688567714730514e211,  i: 0 },
    { n: 127, f: 3.01266001845765954480997707753e213,  i: 0 },
    { n: 128, f: 3.85620482362580421735677065923e215,  i: 0 },
    { n: 129, f: 4.97450422247728744039023415041e217,  i: 0 },
    { n: 130, f: 6.46685548922047367250730439554e219,  i: 0 },
    { n: 131, f: 8.47158069087882051098456875820e221,  i: 0 },
    { n: 132, f: 1.11824865119600430744996307608e224,  i: 0 },
    { n: 133, f: 1.48727070609068572890845089118e226,  i: 0 },
    { n: 134, f: 1.99294274616151887673732419418e228,  i: 0 },
    { n: 135, f: 2.69047270731805048359538766215e230,  i: 0 },
    { n: 136, f: 3.65904288195254865768972722052e232,  i: 0 },
    { n: 137, f: 5.01288874827499166103492629211e234,  i: 0 },
    { n: 138, f: 6.91778647261948849222819828311e236,  i: 0 },
    { n: 139, f: 9.61572319694108900419719561353e238,  i: 0 },
    { n: 140, f: 1.34620124757175246058760738589e241,  i: 0 },
    { n: 141, f: 1.89814375907617096942852641411e243,  i: 0 },
    { n: 142, f: 2.69536413788816277658850750804e245,  i: 0 },
    { n: 143, f: 3.85437071718007277052156573649e247,  i: 0 },
    { n: 144, f: 5.55029383273930478955105466055e249,  i: 0 },
    { n: 145, f: 8.04792605747199194484902925780e251,  i: 0 },
    { n: 146, f: 1.17499720439091082394795827164e254,  i: 0 },
    { n: 147, f: 1.72724589045463891120349865931e256,  i: 0 },
    { n: 148, f: 2.55632391787286558858117801578e258,  i: 0 },
    { n: 149, f: 3.80892263763056972698595524351e260,  i: 0 },
    { n: 150, f: 5.71338395644585459047893286526e262,  i: 0 },
    { n: 151, f: 8.62720977423324043162318862650e264,  i: 0 },
    { n: 152, f: 1.31133588568345254560672467123e267,  i: 0 },
    { n: 153, f: 2.00634390509568239477828874699e269,  i: 0 },
    { n: 154, f: 3.08976961384735088795856467036e271,  i: 0 },
    { n: 155, f: 4.78914290146339387633577523906e273,  i: 0 },
    { n: 156, f: 7.47106292628289444708380937294e275,  i: 0 },
    { n: 157, f: 1.17295687942641442819215807155e278,  i: 0 },
    { n: 158, f: 1.85327186949373479654360975305e280,  i: 0 },
    { n: 159, f: 2.94670227249503832650433950735e282,  i: 0 },
    { n: 160, f: 4.71472363599206132240694321176e284,  i: 0 },
    { n: 161, f: 7.59070505394721872907517857094e286,  i: 0 },
    { n: 162, f: 1.22969421873944943411017892849e289,  i: 0 },
    { n: 163, f: 2.00440157654530257759959165344e291,  i: 0 },
    { n: 164, f: 3.28721858553429622726333031164e293,  i: 0 },
    { n: 165, f: 5.42391066613158877498449501421e295,  i: 0 },
    { n: 166, f: 9.00369170577843736647426172359e297,  i: 0 },
    { n: 167, f: 1.50361651486499904020120170784e300,  i: 0 },
    { n: 168, f: 2.52607574497319838753801886917e302,  i: 0 },
    { n: 169, f: 4.26906800900470527493925188890e304,  i: 0 },
    { n: 170, f: 7.25741561530799896739672821113e306,  i: 0 }

//
//    { 171, 1.24101807021766782342484052410e309,  0 },
//    { 172, 2.13455108077438865629072570146e311,  0 },
//    { 173, 3.69277336973969237538295546352e313,  0 },
//    { 174, 6.42542566334706473316634250653e315,  0 },
//    { 175, 1.12444949108573632830410993864e318,  0 },
//    { 176, 1.97903110431089593781523349201e320,  0 },
//    { 177, 3.50288505463028580993296328086e322,  0 },
//    { 178, 6.23513539724190874168067463993e324,  0 },
//    { 179, 1.11608923610630166476084076055e327,  0 },
//    { 180, 2.00896062499134299656951336898e329,  0 },
//    { 181, 3.63621873123433082379081919786e331,  0 },
//    { 182, 6.61791809084648209929929094011e333,  0 },
//    { 183, 1.21107901062490622417177024204e336,  0 },
//    { 184, 2.22838537954982745247605724535e338,  0 },
//    { 185, 4.12251295216718078708070590390e340,  0 },
//    { 186, 7.66787409103095626397011298130e342,  0 },
//    { 187, 1.43389245502278882136241112750e345,  0 },
//    { 188, 2.69571781544284298416133291969e347,  0 },
//    { 189, 5.09490667118697324006491921822e349,  0 },
//    { 190, 9.68032267525524915612334651460e351,  0 },
//    { 191, 1.84894163097375258881955918429e354,  0 },
//    { 192, 3.54996793146960497053355363384e356,  0 },
//    { 193, 6.85143810773633759312975851330e358,  0 },
//    { 194, 1.32917899290084949306717315158e361,  0 },
//    { 195, 2.59189903615665651148098764559e363,  0 },
//    { 196, 5.08012211086704676250273578535e365,  0 },
//    { 197, 1.00078405584080821221303894971e368,  0 },
//    { 198, 1.98155243056480026018181712043e370,  0 },
//    { 199, 3.94328933682395251776181606966e372,  0 },
//    { 200, 7.88657867364790503552363213932e374,  0 }
//
    ];

const doub_fact_table =
    [
    { n: 0,  f: 1.000000000000000000000000000,    i: 1     },
    { n: 1,  f: 1.000000000000000000000000000,    i: 1     },
    { n: 2,  f: 2.000000000000000000000000000,    i: 2     },
    { n: 3,  f: 3.000000000000000000000000000,    i: 3     },
    { n: 4,  f: 8.000000000000000000000000000,    i: 8     },
    { n: 5,  f: 15.00000000000000000000000000,    i: 15    },
    { n: 6,  f: 48.00000000000000000000000000,    i: 48    },
    { n: 7,  f: 105.0000000000000000000000000,    i: 105   },
    { n: 8,  f: 384.0000000000000000000000000,    i: 384   },
    { n: 9,  f: 945.0000000000000000000000000,    i: 945   },
    { n: 10, f: 3840.000000000000000000000000,    i: 3840  },
    { n: 11, f: 10395.00000000000000000000000,    i: 10395 },
    { n: 12, f: 46080.00000000000000000000000,       i: 46080       },
    { n: 13, f: 135135.0000000000000000000000,       i: 135135      },
    { n: 14, f: 645120.00000000000000000000000,      i: 645120      },
    { n: 15, f: 2.02702500000000000000000000000e6,   i: 2027025     },
    { n: 16, f: 1.03219200000000000000000000000e7,   i: 10321920    },
    { n: 17, f: 3.4459425000000000000000000000e7,    i: 34459425    },
    { n: 18, f: 1.85794560000000000000000000000e8,   i: 185794560   },
    { n: 19, f: 6.5472907500000000000000000000e8,           i: 0 },
    { n: 20, f: 3.7158912000000000000000000000e9,           i: 0 },
    { n: 21, f: 1.37493105750000000000000000000e10,         i: 0 },
    { n: 22, f: 8.1749606400000000000000000000e10,          i: 0 },
    { n: 23, f: 3.1623414322500000000000000000e11,          i: 0 },
    { n: 24, f: 1.96199055360000000000000000000e12,         i: 0 },
    { n: 25, f: 7.9058535806250000000000000000e12,          i: 0 },
    { n: 26, f: 5.1011754393600000000000000000e13,          i: 0 },
    { n: 27, f: 2.13458046676875000000000000000e14,         i: 0 },
    { n: 28, f: 1.42832912302080000000000000000e15,         i: 0 },
    { n: 29, f: 6.1902833536293750000000000000e15,          i: 0 },
    { n: 30, f: 4.2849873690624000000000000000e16,          i: 0 },
    { n: 31, f: 1.91898783962510625000000000000e17,         i: 0 },
    { n: 32, f: 1.37119595809996800000000000000e18,         i: 0 },
    { n: 33, f: 6.3326598707628506250000000000e18,          i: 0 },
    { n: 34, f: 4.6620662575398912000000000000e19,          i: 0 },
    { n: 35, f: 2.21643095476699771875000000000e20,         i: 0 },
    { n: 36, f: 1.67834385271436083200000000000e21,         i: 0 },
    { n: 37, f: 8.2007945326378915593750000000e21,          i: 0 },
    { n: 38, f: 6.3777066403145711616000000000e22,          i: 0 },
    { n: 39, f: 3.1983098677287777081562500000e23,          i: 0 },
    { n: 40, f: 2.55108265612582846464000000000e24,         i: 0 },
    { n: 41, f: 1.31130704576879886034406250000e25,         i: 0 },
    { n: 42, f: 1.07145471557284795514880000000e26,         i: 0 },
    { n: 43, f: 5.6386202968058350994794687500e26,          i: 0 },
    { n: 44, f: 4.7144007485205310026547200000e27,          i: 0 },
    { n: 45, f: 2.53737913356262579476576093750e28,         i: 0 },
    { n: 46, f: 2.16862434431944426122117120000e29,         i: 0 },
    { n: 47, f: 1.19256819277443412353990764062e30,         i: 0 },
    { n: 48, f: 1.04093968527333324538616217600e31,         i: 0 },
    { n: 49, f: 5.8435841445947272053455474391e31,          i: 0 },
    { n: 50, f: 5.2046984263666662269308108800e32,          i: 0 },
    { n: 51, f: 2.98022791374331087472622919392e33,         i: 0 },
    { n: 52, f: 2.70644318171066643800402165760e34,         i: 0 },
    { n: 53, f: 1.57952079428395476360490147278e35,         i: 0 },
    { n: 54, f: 1.46147931812375987652217169510e36,         i: 0 },
    { n: 55, f: 8.6873643685617511998269581003e36,          i: 0 },
    { n: 56, f: 8.1842841814930553085241614926e37,          i: 0 },
    { n: 57, f: 4.9517976900801981839013661172e38,          i: 0 },
    { n: 58, f: 4.7468848252659720789440136657e39,          i: 0 },
    { n: 59, f: 2.92156063714731692850180600912e40,       i: 0 },
    { n: 60, f: 2.84813089515958324736640819942e41,       i: 0 },
    { n: 61, f: 1.78215198865986332638610166557e42,       i: 0 },
    { n: 62, f: 1.76584115499894161336717308364e43,       i: 0 },
    { n: 63, f: 1.12275575285571389562324404931e44,       i: 0 },
    { n: 64, f: 1.13013833919932263255499077353e45,       i: 0 },
    { n: 65, f: 7.2979123935621403215510863205e45,        i: 0 },
    { n: 66, f: 7.4589130387155293748629391053e46,        i: 0 },
    { n: 67, f: 4.8896013036866340154392278347e47,        i: 0 },
    { n: 68, f: 5.0720608663265599749067985916e48,        i: 0 },
    { n: 69, f: 3.3738248995437774706530672060e49,        i: 0 },
    { n: 70, f: 3.5504426064285919824347590141e50,        i: 0 },
    { n: 71, f: 2.39541567867608200416367771623e51,       i: 0 },
    { n: 72, f: 2.55631867662858622735302649017e52,       i: 0 },
    { n: 73, f: 1.74865344543353986303948473285e53,       i: 0 },
    { n: 74, f: 1.89167582070515380824123960272e54,       i: 0 },
    { n: 75, f: 1.31149008407515489727961354964e55,       i: 0 },
    { n: 76, f: 1.43767362373591689426334209807e56,       i: 0 },
    { n: 77, f: 1.00984736473786927090530243322e57,       i: 0 },
    { n: 78, f: 1.12138542651401517752540683649e58,       i: 0 },
    { n: 79, f: 7.9777941814291672401518892225e58,        i: 0 },
    { n: 80, f: 8.9710834121121214202032546920e59,        i: 0 },
    { n: 81, f: 6.4620132869576254645230302702e60,        i: 0 },
    { n: 82, f: 7.3562883979319395645666688474e61,        i: 0 },
    { n: 83, f: 5.3634710281748291355541151243e62,        i: 0 },
    { n: 84, f: 6.1792822542628292342360018318e63,        i: 0 },
    { n: 85, f: 4.5589503739486047652209978556e64,        i: 0 },
    { n: 86, f: 5.3141827386660331414429615754e65,        i: 0 },
    { n: 87, f: 3.9662868253352861457422681344e66,        i: 0 },
    { n: 88, f: 4.6764808100261091644698061863e67,        i: 0 },
    { n: 89, f: 3.5299952745484046697106186396e68,        i: 0 },
    { n: 90, f: 4.2088327290234982480228255677e69,        i: 0 },
    { n: 91, f: 3.2122956998390482494366629620e70,        i: 0 },
    { n: 92, f: 3.8721261107016183881809995223e71,        i: 0 },
    { n: 93, f: 2.98743500085031487197609655470e72,       i: 0 },
    { n: 94, f: 3.6397985440595212848901395509e73,        i: 0 },
    { n: 95, f: 2.83806325080779912837729172696e74,       i: 0 },
    { n: 96, f: 3.4942066022971404334945339689e75,        i: 0 },
    { n: 97, f: 2.75292135328356515452597297515e76,       i: 0 },
    { n: 98, f: 3.4243224702511976248246432895e77,        i: 0 },
    { n: 99, f: 2.72539213975072950298071324540e78,       i: 0 },
    { n: 100, f: 3.4243224702511976248246432895e79,       i:0 },
    { n: 101, f: 2.75264606114823679801052037785e80,      i:0 },
    { n: 102, f: 3.4928089196562215773211361553e81,       i:0 },
    { n: 103, f: 2.83522544298268390195083598919e82,      i:0 },
    { n: 104, f: 3.6325212764424704404139816015e83,       i:0 },
    { n: 105, f: 2.97698671513181809704837778865e84,      i:0 },
    { n: 106, f: 3.8504725530290186668388204976e85,       i:0 },
    { n: 107, f: 3.1853757851910453638417642339e86,       i:0 },
    { n: 108, f: 4.1585103572713401601859261374e87,       i:0 },
    { n: 109, f: 3.4720596058582394465875230149e88,       i:0 },
    { n: 110, f: 4.5743613929984741762045187512e89,       i:0 },
    { n: 111, f: 3.8539861625026457857121505465e90,       i:0 },
    { n: 112, f: 5.1232847601582910773490610013e91,       i:0 },
    { n: 113, f: 4.3550043636279897378547301176e92,       i:0 },
    { n: 114, f: 5.8405446265804518281779295415e93,       i:0 },
    { n: 115, f: 5.0082550181721881985329396352e94,       i:0 },
    { n: 116, f: 6.7750317668333241206863982681e95,       i:0 },
    { n: 117, f: 5.8596583712614601922835393732e96,       i:0 },
    { n: 118, f: 7.9945374848633224624099499564e97,       i:0 },
    { n: 119, f: 6.9729934618011376288174118541e98,       i:0 },
    { n: 120, f: 9.5934449818359869548919399477e99,       i:0 },
    { n: 121, f: 8.4373220887793765308690683435e100,      i:0 },
    { n: 122, f: 1.17040028778399040849681667362e102,     i:  0 },
    { n: 123, f: 1.03779061691986331329689540625e103,     i:  0 },
    { n: 124, f: 1.45129635685214810653605267528e104,     i:  0 },
    { n: 125, f: 1.29723827114982914162111925781e105,     i:  0 },
    { n: 126, f: 1.82863340963370661423542637086e106,     i:  0 },
    { n: 127, f: 1.64749260436028300985882145742e107,     i:  0 },
    { n: 128, f: 2.34065076433114446622134575470e108,     i:  0 },
    { n: 129, f: 2.12526545962476508271787968008e109,     i:  0 },
    { n: 130, f: 3.04284599363048780608774948111e110,     i:  0 },
    { n: 131, f: 2.78409775210844225836042238090e111,     i:  0 },
    { n: 132, f: 4.0165567115922439040358293151e112,      i:  0 },
    { n: 133, f: 3.7028500103042282036193617666e113,      i:  0 },
    { n: 134, f: 5.3821859935336068314080112822e114,      i:  0 },
    { n: 135, f: 4.9988475139107080748861383849e115,      i:  0 },
    { n: 136, f: 7.3197729512057052907148953438e116,      i:  0 },
    { n: 137, f: 6.8484210940576700625940095873e117,      i:  0 },
    { n: 138, f: 1.01012866726638733011865555744e119,     i:  0 },
    { n: 139, f: 9.5193053207401613870056733264e119,      i:  0 },
    { n: 140, f: 1.41418013417294226216611778042e121,     i:  0 },
    { n: 141, f: 1.34222205022436275556779993902e122,     i:  0 },
    { n: 142, f: 2.00813579052557801227588724819e123,     i:  0 },
    { n: 143, f: 1.91937753182083874046195391280e124,     i:  0 },
    { n: 144, f: 2.89171553835683233767727763739e125,     i:  0 },
    { n: 145, f: 2.78309742114021617366983317355e126,     i:  0 },
    { n: 146, f: 4.2219046860009752130088253506e127,      i:  0 },
    { n: 147, f: 4.0911532090761177752946547651e128,      i:  0 },
    { n: 148, f: 6.2484189352814433152530615189e129,      i:  0 },
    { n: 149, f: 6.0958182815234154851890356000e130,      i:  0 },
    { n: 150, f: 9.3726284029221649728795922783e131,      i:  0 },
    { n: 151, f: 9.2046856051003573826354437561e132,      i:  0 },
    { n: 152, f: 1.42463951724416907587769802630e134,     i:  0 },
    { n: 153, f: 1.40831689758035467954322289468e135,     i:  0 },
    { n: 154, f: 2.19394485655602037685165496051e136,     i:  0 },
    { n: 155, f: 2.18289119124954975329199548675e137,     i:  0 },
    { n: 156, f: 3.4225539762273917878885817384e138,      i:  0 },
    { n: 157, f: 3.4271391702617931126684329142e139,      i:  0 },
    { n: 158, f: 5.4076352824392790248639591467e140,      i:  0 },
    { n: 159, f: 5.4491512807162510491428083336e141,      i:  0 },
    { n: 160, f: 8.6522164519028464397823346347e142,      i:  0 },
    { n: 161, f: 8.7731335619531641891199214170e143,      i:  0 },
    { n: 162, f: 1.40165906520826112324473821082e145,     i:  0 },
    { n: 163, f: 1.43002077059836576282654719098e146,     i:  0 },
    { n: 164, f: 2.29872086694154824212137066574e147,     i:  0 },
    { n: 165, f: 2.35953427148730350866380286512e148,     i:  0 },
    { n: 166, f: 3.8158766391229700819214753051e149,      i:  0 },
    { n: 167, f: 3.9404222333837968594685507847e150,      i:  0 },
    { n: 168, f: 6.4106727537265897376280785126e151,      i:  0 },
    { n: 169, f: 6.6593135744186166925018508262e152,      i:  0 },
    { n: 170, f: 1.08981436813352025539677334714e154,     i:  0 },
    { n: 171, f: 1.13874262122558345441781649128e155,     i:  0 },
    { n: 172, f: 1.87448071318965483928245015709e156,     i:  0 },
    { n: 173, f: 1.97002473472025937614282252992e157,     i:  0 },
    { n: 174, f: 3.2615964409499994203514632733e158,      i:  0 },
    { n: 175, f: 3.4475432857604539082499394274e159,      i:  0 },
    { n: 176, f: 5.7404097360719989798185753611e160,      i:  0 },
    { n: 177, f: 6.1021516157960034176023927864e161,      i:  0 },
    { n: 178, f: 1.02179293302081581840770641427e163,     i:  0 },
    { n: 179, f: 1.09228513922748461175082830877e164,     i:  0 },
    { n: 180, f: 1.83922727943746847313387154568e165,     i:  0 },
    { n: 181, f: 1.97703610200174714726899923887e166,     i:  0 },
    { n: 182, f: 3.3473936485761926211036462131e167,      i:  0 },
    { n: 183, f: 3.6179760666631972795022686071e168,      i:  0 },
    { n: 184, f: 6.1592043133801944228307090322e169,      i:  0 },
    { n: 185, f: 6.6932557233269149670791969232e170,      i:  0 },
    { n: 186, f: 1.14561200228871616264651187999e172,     i:  0 },
    { n: 187, f: 1.25163882026213309884380982464e173,     i:  0 },
    { n: 188, f: 2.15375056430278638577544233437e174,     i:  0 },
    { n: 189, f: 2.36559737029543155681480056857e175,     i:  0 },
    { n: 190, f: 4.0921260721752941329733404353e176,      i:  0 },
    { n: 191, f: 4.5182909772642742735162690860e177,      i:  0 },
    { n: 192, f: 7.8568820585765647353088136358e178,      i:  0 },
    { n: 193, f: 8.7203015861200493478863993359e179,      i:  0 },
    { n: 194, f: 1.52423511936385355864990984535e181,     i:  0 },
    { n: 195, f: 1.70045880929340962283784787050e182,     i:  0 },
    { n: 196, f: 2.98750083395315297495382329688e183,     i:  0 },
    { n: 197, f: 3.3499038543080169569905603049e184,      i:  0 },
    { n: 198, f: 5.9152516512272428904085701278e185,      i:  0 },
    { n: 199, f: 6.6663086700729537444112150067e186,      i:  0 },
    { n: 200, f: 1.18305033024544857808171402556e188,     i:  0 },
    { n: 201, f: 1.33992804268466370262665421635e189,     i:  0 },
    { n: 202, f: 2.38976166709580612772506233164e190,     i:  0 },
    { n: 203, f: 2.72005392664986731633210805920e191,     i:  0 },
    { n: 204, f: 4.8751138008754445005591271565e192,      i:  0 },
    { n: 205, f: 5.5761105496322279984808215214e193,      i:  0 },
    { n: 206, f: 1.00427344298034156711518019425e195,     i:  0 },
    { n: 207, f: 1.15425488377387119568553005492e196,     i:  0 },
    { n: 208, f: 2.08888876139911045959957480403e197,     i:  0 },
    { n: 209, f: 2.41239270708739079898275781478e198,     i:  0 },
    { n: 210, f: 4.3866663989381319651591070885e199,      i:  0 },
    { n: 211, f: 5.0901486119543945858536189892e200,      i:  0 },
    { n: 212, f: 9.2997327657488397661373070276e201,      i:  0 },
    { n: 213, f: 1.08420165434628604678682084470e203,     i:  0 },
    { n: 214, f: 1.99014281187025170995338370390e204,     i:  0 },
    { n: 215, f: 2.33103355684451500059166481610e205,     i:  0 },
    { n: 216, f: 4.2987084736397436934993088004e206,      i:  0 },
    { n: 217, f: 5.0583428183525975512839126509e207,      i:  0 },
    { n: 218, f: 9.3711844725346412518284931849e208,      i:  0 },
    { n: 219, f: 1.10777707721921886373117687056e210,     i:  0 },
    { n: 220, f: 2.06166058395762107540226850068e211,     i:  0 },
    { n: 221, f: 2.44818734065447368884590088393e212,     i:  0 },
    { n: 222, f: 4.5768864963859187873930360715e213,      i:  0 },
    { n: 223, f: 5.4594577696594763261263589712e214,      i:  0 },
    { n: 224, f: 1.02522257519044580837604008002e216,     i:  0 },
    { n: 225, f: 1.22837799817338217337843076851e217,     i:  0 },
    { n: 226, f: 2.31700301993040752692985058084e218,     i:  0 },
    { n: 227, f: 2.78841805585357753356903784452e219,     i:  0 },
    { n: 228, f: 5.2827668854413291614000593243e220,      i:  0 },
    { n: 229, f: 6.3854773479046925518730966640e221,      i:  0 },
    { n: 230, f: 1.21503638365150570712201364459e223,     i:  0 },
    { n: 231, f: 1.47504526736598397948268532937e224,     i:  0 },
    { n: 232, f: 2.81888441007149324052307165546e225,     i:  0 },
    { n: 233, f: 3.4368554729627426721946568174e226,      i:  0 },
    { n: 234, f: 6.5961895195672941828239876738e227,      i:  0 },
    { n: 235, f: 8.0766103614624452796574435210e228,      i:  0 },
    { n: 236, f: 1.55670072661788142714646109101e230,     i:  0 },
    { n: 237, f: 1.91415665566659953127881411447e231,     i:  0 },
    { n: 238, f: 3.7049477293505577966085773966e232,      i:  0 },
    { n: 239, f: 4.5748344070431728797563657336e233,      i:  0 },
    { n: 240, f: 8.8918745504413387118605857518e234,      i:  0 },
    { n: 241, f: 1.10253509209740466402128414180e236,     i:  0 },
    { n: 242, f: 2.15183364120680396827026175195e237,     i:  0 },
    { n: 243, f: 2.67916027379669333357172046456e238,     i:  0 },
    { n: 244, f: 5.2504740845446016825794386748e239,      i:  0 },
    { n: 245, f: 6.5639426708018986672507151382e240,      i:  0 },
    { n: 246, f: 1.29161662479797201391454191399e242,     i:  0 },
    { n: 247, f: 1.62129383968806897081092663913e243,     i:  0 },
    { n: 248, f: 3.2032092294989705945080639467e244,      i:  0 },
    { n: 249, f: 4.0370216608232917373192073314e245,      i:  0 },
    { n: 250, f: 8.0080230737474264862701598667e246,      i:  0 },
    { n: 251, f: 1.01329243686664622606712104019e248,     i:  0 },
    { n: 252, f: 2.01802181458435147454008028642e249,     i:  0 },
    { n: 253, f: 2.56362986527261495194981623168e250,     i:  0 },
    { n: 254, f: 5.1257754090442527453318039275e251,      i:  0 },
    { n: 255, f: 6.5372561564451681274720313908e252,      i:  0 },
    { n: 256, f: 1.31219850471532870280494180544e254,     i:  0 },
    { n: 257, f: 1.68007483220640820876031206743e255,     i:  0 },
    { n: 258, f: 3.3854721421655480532367498580e256,      i:  0 },
    { n: 259, f: 4.3513938154145972606892082546e257,      i:  0 },
    { n: 260, f: 8.8022275696304249384155496309e258,      i:  0 },
    { n: 261, f: 1.13571378582320988503988335446e260,     i:  0 },
    { n: 262, f: 2.30618362324317133386487400329e261,     i:  0 },
    { n: 263, f: 2.98692725671504199765489322224e262,     i:  0 },
    { n: 264, f: 6.0883247653619723214032673687e263,      i:  0 },
    { n: 265, f: 7.9153572302948612937854670389e264,      i:  0 },
    { n: 266, f: 1.61949438758628463749326912007e266,     i:  0 },
    { n: 267, f: 2.11340038048872796544071969939e267,     i:  0 },
    { n: 268, f: 4.3402449587312428284819612418e268,      i:  0 },
    { n: 269, f: 5.6850470235146782270355359914e269,      i:  0 },
    { n: 270, f: 1.17186613885743556369012953528e271,     i:  0 },
    { n: 271, f: 1.54064774337247779952663025366e272,     i:  0 },
    { n: 272, f: 3.1874758976922247332371523360e273,      i:  0 },
    { n: 273, f: 4.2059683394068643927077005925e274,      i:  0 },
    { n: 274, f: 8.7336839596766957690697974006e275,      i:  0 },
    { n: 275, f: 1.15664129333688770799461766294e277,     i:  0 },
    { n: 276, f: 2.41049677287076803226326408256e278,     i:  0 },
    { n: 277, f: 3.2038963825431789511450909263e279,      i:  0 },
    { n: 278, f: 6.7011810285807351296918741495e280,      i:  0 },
    { n: 279, f: 8.9388709072954692736948036845e281,      i:  0 },
    { n: 280, f: 1.87633068800260583631372476186e283,     i:  0 },
    { n: 281, f: 2.51182272495002686590823983534e284,     i:  0 },
    { n: 282, f: 5.2912525401673484584047038284e285,      i:  0 },
    { n: 283, f: 7.1084583116085760305203187340e286,      i:  0 },
    { n: 284, f: 1.50271572140752696218693588728e288,     i:  0 },
    { n: 285, f: 2.02591061880844416869829083919e289,     i:  0 },
    { n: 286, f: 4.2977669632255271118546366376e290,      i:  0 },
    { n: 287, f: 5.8143634759802347641640947085e291,      i:  0 },
    { n: 288, f: 1.23775688540895180821413535163e293,     i:  0 },
    { n: 289, f: 1.68035104455828784684342337075e294,     i:  0 },
    { n: 290, f: 3.5894949676859602438209925197e295,      i:  0 },
    { n: 291, f: 4.8898215396646176343143620089e296,      i:  0 },
    { n: 292, f: 1.04813253056430039119572981576e298,     i:  0 },
    { n: 293, f: 1.43271771112173296685410806860e299,     i:  0 },
    { n: 294, f: 3.08150963985904315011544565835e300,     i:  0 },
    { n: 295, f: 4.2265172478091122522196188024e301,      i:  0 },
    { n: 296, f: 9.1212685339827677243417191487e302,      i:  0 },
    { n: 297, f: 1.25527562259930633890922678431e304,     i:  0 }
//
//  { 298, 2.71813802312686478185383230631e305,       0 },
//  { 299, 3.7532741115719259533385880851e306,        0 },
//  { 300, 8.1544140693805943455614969189e307,  }
//
    ];

// Chebyshev coefficients for Gamma*(3/4(t+1)+1/2), -1<t<1
const gstar_a_data =
    [
    2.16786447866463034423060819465,
   -0.05533249018745584258035832802,
    0.01800392431460719960888319748,
   -0.00580919269468937714480019814,
    0.00186523689488400339978881560,
   -0.00059746524113955531852595159,
    0.00019125169907783353925426722,
   -0.00006124996546944685735909697,
    0.00001963889633130842586440945,
   -6.3067741254637180272515795142e-06,
    2.0288698405861392526872789863e-06,
   -6.5384896660838465981983750582e-07,
    2.1108698058908865476480734911e-07,
   -6.8260714912274941677892994580e-08,
    2.2108560875880560555583978510e-08,
   -7.1710331930255456643627187187e-09,
    2.3290892983985406754602564745e-09,
   -7.5740371598505586754890405359e-10,
    2.4658267222594334398525312084e-10,
   -8.0362243171659883803428749516e-11,
    2.6215616826341594653521346229e-11,
   -8.5596155025948750540420068109e-12,
    2.7970831499487963614315315444e-12,
   -9.1471771211886202805502562414e-13,
    2.9934720198063397094916415927e-13,
   -9.8026575909753445931073620469e-14,
    3.2116773667767153777571410671e-14,
   -1.0518035333878147029650507254e-14,
    3.4144405720185253938994854173e-15,
   -1.0115153943081187052322643819e-15
    ];
const gstar_a_cs = { length: 29, c: gstar_a_data, order: 29, a: -1.0, b: 1.0, order_sp: 17 };


// Chebyshev coefficients for
// x^2(Gamma*(x) - 1 - 1/(12x)), x = 4(t+1)+2, -1 < t < 1
const gstar_b_data =
    [
    0.0057502277273114339831606096782,
    0.0004496689534965685038254147807,
   -0.0001672763153188717308905047405,
    0.0000615137014913154794776670946,
   -0.0000223726551711525016380862195,
    8.0507405356647954540694800545e-06,
   -2.8671077107583395569766746448e-06,
    1.0106727053742747568362254106e-06,
   -3.5265558477595061262310873482e-07,
    1.2179216046419401193247254591e-07,
   -4.1619640180795366971160162267e-08,
    1.4066283500795206892487241294e-08,
   -4.6982570380537099016106141654e-09,
    1.5491248664620612686423108936e-09,
   -5.0340936319394885789686867772e-10,
    1.6084448673736032249959475006e-10,
   -5.0349733196835456497619787559e-11,
    1.5357154939762136997591808461e-11,
   -4.5233809655775649997667176224e-12,
    1.2664429179254447281068538964e-12,
   -3.2648287937449326771785041692e-13,
    7.1528272726086133795579071407e-14,
   -9.4831735252566034505739531258e-15,
   -2.3124001991413207293120906691e-15,
    2.8406613277170391482590129474e-15,
   -1.7245370321618816421281770927e-15,
    8.6507923128671112154695006592e-16,
   -3.9506563665427555895391869919e-16,
    1.6779342132074761078792361165e-16,
   -6.0483153034414765129837716260e-17
    ];
const gstar_b_cs = { length: 29, c: gstar_b_data, order: 29, a: -1.0, b: 1.0, order_sp: 18 };


// coefficients for gamma=7, kmax=8  Lanczos method
const lanczos_7_c =
    [
    0.99999999999980993227684700473478,
    676.520368121885098567009190444019,
   -1259.13921672240287047156078755283,
    771.3234287776530788486528258894,
   -176.61502916214059906584551354,
    12.507343278686904814458936853,
   -0.13857109526572011689554707,
    9.984369578019570859563e-6,
    1.50563273514931155834e-7
    ];

// complex version of Lanczos method; this is not safe for export
// since it becomes bad in the left half-plane
//
function lngamma_lanczos_complex( zr0, zi, /* IN OUT */ yr, /* IN OUT */ yi )
{
    var log1_r  = { val: 0.0, err: 0.0 }; // Result;
    var log1_i  = { val: 0.0, err: 0.0 }; // Result;
    var logAg_r = { val: 0.0, err: 0.0 }; // Result;
    var logAg_i = { val: 0.0, err: 0.0 }; // Result;
    var Ag_r = 0.0;
    var Ag_i = 0.0;
    var yi_tmp_val = 0.0;
    var yi_tmp_err = 0.0;
    var R  = 0.0;
    var I  = 0.0;
    var a  = 0.0;
    var zr = zr0;
    var yiNightmare = { val: 0.0, err: 0.0 };

    zr = zr - 1.0; // Lanczos writes z! instead of Gamma(z)
  
    Ag_r = lanczos_7_c[0];
    Ag_i = 0.0;
    for ( let k = 1; k <= 8; k++ )
    {
        R = zr + (k);
        I = zi;
        a = lanczos_7_c[k] / (R * R + I * I);
        Ag_r = Ag_r + a * R;
        Ag_i = Ag_i - a * I;
    }
  
    gsl_sf_complex_log_e( zr + 7.5, zi, log1_r,  log1_i );
    gsl_sf_complex_log_e( Ag_r, Ag_i,   logAg_r, logAg_i );
  
    // (z+0.5)*log(z+7.5) - (z+7.5) + LogRootTwoPi_ + log(Ag(z))
    yr.val = (zr + 0.5) * log1_r.val - zi * log1_i.val - (zr + 7.5) + LogRootTwoPi + logAg_r.val;
    yi.val = zi * log1_r.val + (zr + 0.5) * log1_i.val - zi + logAg_i.val;
    yr.err = 4.0 * GSL_DBL_EPSILON * Math.abs( yr.val );
    yi.err = 4.0 * GSL_DBL_EPSILON * Math.abs( yi.val );
    yi_tmp_val = yi.val;
    yi_tmp_err = yi.err;
    yiNightmare = gsl_sf_angle_restrict_symm_err_e( yi_tmp_val );
    yi.val = yiNightmare.val;
    yi.err = yi.err + yi_tmp_err;

} // lngamma_lanczos_complex

// ----------------------------------------------------------------------------

// Lanczos method for real x > 0;
// gamma=7, truncated at 1/(z+8) 
// [J. SIAM Numer. Anal, Ser. B, 1 (1964) 86]
//
function lngamma_lanczos(x)
{
    var x1 = 0.0;
    var ag = 0.0;
    var term1 = 0.0;
    var term2 = 0.0;

    var r = { val: 0.0, err: 0.0 }; // Result;

    x1 = x - 1.0; // Lanczos writes z! instead of Gamma(z)
  
    ag = lanczos_7_c[0];
    for (let k = 1; k <= 8; k++)
    {
        ag = ag + lanczos_7_c[k] / (x1 + (k));
    }
  
    // (x+0.5)*log(x+7.5) - (x+7.5) + LogRootTwoPi_ + log(Ag(x))
    term1 = (x1 + 0.5) * Math.log((x1 + 7.5) / M_E);
    term2 = LogRootTwoPi + Math.log(ag);
    r.val = term1 + (term2 - 7.0);
    r.err = 2.0 * GSL_DBL_EPSILON * (Math.abs(term1) + Math.abs(term2) + 7.0);
    r.err = r.err + GSL_DBL_EPSILON * Math.abs(r.val);

    return r;

} // lngamma_lanczos

// ----------------------------------------------------------------------------

// x = eps near zero
// gives double-precision for |eps| < 0.02

function lngamma_sgn_0(eps)//, lng, sgn)
{
    const c1  = -0.07721566490153286061;
    const c2  = -0.01094400467202744461;
    const c3  =  0.09252092391911371098;
    const c4  = -0.01827191316559981266;
    const c5  =  0.01800493109685479790;
    const c6  = -0.00685088537872380685;
    const c7  =  0.00399823955756846603;
    const c8  = -0.00189430621687107802;
    const c9  =  0.00097473237804513221;
    const c10 = -0.00048434392722255893;

    var g6  = 0.0;
    var g   = 0.0;
    var gee = 0.0;
    var sgn = 0.0;

    var r = { val: 0.0, err: 0.0, sign: 0.0 };
    var lng = { val: 0.0, err: 0.0 };

    // calculate series for g(eps) = Gamma(eps) eps - 1/(1+eps) - eps/2
    g6 = c6 + eps * (c7 + eps * (c8 + eps * (c9 + eps * c10)));
    g  = eps * (c1 + eps * (c2 + eps * (c3 + eps * (c4 + eps * (c5 + eps * g6)))));
  
    // calculate Gamma(eps) eps, a positive quantity
    gee = g + 1.0 / (1.0 + eps) + 0.5 * eps;
  
    lng.val = Math.log(gee / Math.abs(eps));
    lng.err = 4.0 * GSL_DBL_EPSILON * Math.abs(lng.val);
    sgn = GSL_SIGN(eps);

    r.val = lng.val;
    r.err = lng.err;
    r.sign = sgn;
    return r;

} // lngamma_sgn_0

// ----------------------------------------------------------------------------

// x near a negative integer
// Calculates sign as well as log(|gamma(x)|).
// x = -N + eps
// assumes N >= 1

function lngamma_sgn_sing(n, eps)//, lng, sgn)
{
    const c0 =  0.07721566490153286061;
    const c1 =  0.08815966957356030521;
    const c2 = -0.00436125434555340577;
    const c3 =  0.01391065882004640689;
    const c4 = -0.00409427227680839100;
    const c5 =  0.00275661310191541584;
    const c6 = -0.00124162645565305019;
    const c7 =  0.00065267976121802783;
    const c8 = -0.00032205261682710437;
    const c9 =  0.00016229131039545456;

    var g5    = 0.0;
    var g     = 0.0;
    var gam_e = 0.0;
    var sgn   = 0.0;

    var r = { val: 0.0, err: 0.0, sign: 0.0 };
    var lng = { val: 0.0, err: 0.0 };

    if (eps == 0.0)
    {
        throw "SF.DomainException";
    }
    else if (n == 1)
    {
        // calculate series for
        // g = eps gamma(-1+eps) + 1 + eps/2 (1+3eps)/(1-eps^2)
        // double-precision for |eps| < 0.02

        g5 = c5 + eps * (c6 + eps * (c7 + eps * (c8 + eps * c9)));
        g  = eps * (c0 + eps * (c1 + eps * (c2 + eps * (c3 + eps * (c4 + eps * g5)))));
  
        // calculate eps gamma(-1+eps), a negative quantity
        gam_e = g - 1.0 - 0.5 * eps * (1.0 + 3.0 * eps) / (1.0 - eps * eps);
  
        lng.val = Math.log(Math.abs(gam_e) / Math.abs(eps));
        lng.err = 2.0 * GSL_DBL_EPSILON * Math.abs(lng.val);
        if (eps > 0.0)
        {
            sgn = -1.0;
        }
        else
        {
            sgn = 1.0;
        }
    }
    else
    {
        // series for sin(Pi(N+1-eps))/(Pi eps) modulo the sign
        // double-precision for |eps| < 0.02

        const cs1 = -1.6449340668482264365;
        const cs2 =  0.8117424252833536436;
        const cs3 = -0.1907518241220842137;
        const cs4 =  0.0261478478176548005;
        const cs5 = -0.0023460810354558236;

        var aeps = 0.0;
        var vc1 = 0.0;
        var vc2 = 0.0;
        var vc3 = 0.0;
        var vc4 = 0.0;
        var vc5 = 0.0;
        var vc6 = 0.0;
        var vc7 = 0.0;
        var lng_ser = 0.0;
        var e2 = 0.0;
        var sin_ser = 0.0;
        var vc0   = { val: 0.0, err: 0.0 }; // Result;
        var psi_0 = { val: 0.0, err: 0.0 }; // Result;
        var psi_1 = { val: 0.0, err: 0.0 }; // Result;
        var psi_2 = { val: 0.0, err: 0.0 }; // Result;
        var psi_3 = { val: 0.0, err: 0.0 }; // Result;
        var psi_4 = { val: 0.0, err: 0.0 }; // Result;
        var psi_5 = { val: 0.0, err: 0.0 }; // Result;
        var psi_6 = { val: 0.0, err: 0.0 }; // Result;

        e2  = eps * eps;
        sin_ser = 1.0 + e2 * (cs1 + e2 * (cs2 + e2 * (cs3 + e2 * (cs4 + e2 * cs5))));

        // calculate series for ln(gamma(1+N-eps))
        // double-precision for |eps| < 0.02

        aeps = Math.abs(eps);
        psi_2.val = 0.0;
        psi_3.val = 0.0;
        psi_4.val = 0.0;
        psi_5.val = 0.0;
        psi_6.val = 0.0;
        vc0 = gsl_sf_lnfact_e(n);
        psi_0 = gsl_sf_psi_int_e(n + 1);
        psi_1 = gsl_sf_psi_1_int_e(n + 1);
        if (aeps > 0.00001)
        {
            psi_2 = gsl_sf_psi_n_e(2, (n) + 1.0);
        }
        if (aeps > 0.0002)
        {
            psi_3 = gsl_sf_psi_n_e(3, (n) + 1.0);
        }
        if (aeps > 0.001)
        {
            psi_4 = gsl_sf_psi_n_e(4, (n) + 1.0);
        }
        if (aeps > 0.005)
        {
            psi_5 = gsl_sf_psi_n_e(5, (n) + 1.0);
        }
        if (aeps > 0.01)
        {
            psi_6 = gsl_sf_psi_n_e(6, (n) + 1.0);
        }
        vc1 = psi_0.val;
        vc2 = psi_1.val / 2.0;
        vc3 = psi_2.val / 6.0;
        vc4 = psi_3.val / 24.0;
        vc5 = psi_4.val / 120.0;
        vc6 = psi_5.val / 720.0;
        vc7 = psi_6.val / 5040.0;
        lng_ser = vc0.val - eps * (vc1 - eps * (vc2 - eps * (vc3 - eps * (vc4 - eps * (vc5 - eps * (vc6 - eps * vc7))))));

        // calculate
        // g = ln(|eps gamma(-N+eps)|)
        //   = -ln(gamma(1+N-eps)) + ln(|eps Pi/sin(Pi(N+1+eps))|)

        g = -lng_ser - Math.log(sin_ser);

        lng.val = g - Math.log(Math.abs(eps));
        lng.err = c0.err + 2.0 * GSL_DBL_EPSILON * (Math.abs(g) + Math.abs(lng.val));

        // INEFFECTIVE!!!
        if (GSL_IS_ODD(n))
        {
            sgn = -1.0;
        }
        else
        {
            sgn = 1.0;
        }
        if (eps > 0.0)
        {
            sgn = sgn * 1.0;
        }
        else
        {
            sgn = sgn * (-1.0);
        }
        // *sgn = ( GSL_IS_ODD(N) ? -1.0 : 1.0 ) * ( eps > 0.0 ? 1.0 : -1.0 );
    }

    r.val = lng.val;
    r.err = lng.err;
    r.sign = sgn;
    return r;

} // lngamma_sgn_sing

// ----------------------------------------------------------------------------

function lngamma_1_pade(eps)
{
    const n1 = -1.0017419282349508699871138440;
    const n2 =  1.7364839209922879823280541733;
    const d1 =  1.2433006018858751556055436011;
    const d2 =  5.0456274100274010152489597514;
    const c0 =  0.004785324257581753;
    const c1 = -0.01192457083645441;
    const c2 =  0.01931961413960498;
    const c3 = -0.02594027398725020;
    const c4 =  0.03141928755021455;

    var num  = 0.0;
    var den  = 0.0;
    var pade = 0.0;
    var eps5 = 0.0;
    var corr = 0.0;

    var r = { val: 0.0, err: 0.0 }; // Result;

    // Use (2,2) Pade for Log[Gamma[1+eps]]/eps
    // plus a correction series.

    num = (eps + n1) * (eps + n2);
    den = (eps + d1) * (eps + d2);
    pade = 2.0816265188662692474880210318 * num / den;
    eps5 = eps * eps * eps * eps * eps;
    corr = eps5 * (c0 + eps * (c1 + eps * (c2 + eps * (c3 + c4 * eps))));
    r.val = eps * (pade + corr);
    r.err = 2.0 * GSL_DBL_EPSILON * Math.abs(r.val);
    return r;

} // lngamma_1_pade

// ----------------------------------------------------------------------------

function lngamma_2_pade(eps)
{
    const n1 = 1.000895834786669227164446568;
    const n2 = 4.209376735287755081642901277;
    const d1 = 2.618851904903217274682578255;
    const d2 = 10.85766559900983515322922936;
    const c0 =  0.0001139406357036744;
    const c1 = -0.0001365435269792533;
    const c2 =  0.0001067287169183665;
    const c3 = -0.0000693271800931282;
    const c4 =  0.0000407220927867950;

    var num  = 0.0;
    var den  = 0.0;
    var pade = 0.0;
    var eps5 = 0.0;
    var corr = 0.0;

    var r = { val: 0.0, err: 0.0 }; // Result;

    // Use (2,2) Pade for Log[Gamma[2+eps]]/eps
    // plus a correction series.

    num = (eps + n1) * (eps + n2);
    den = (eps + d1) * (eps + d2);
    pade = 2.85337998765781918463568869 * num / den;
    eps5 = eps * eps * eps * eps * eps;
    corr = eps5 * (c0 + eps * (c1 + eps * (c2 + eps * (c3 + c4 * eps))));
    r.val = eps * (pade + corr);
    r.err = 2.0 * GSL_DBL_EPSILON * Math.abs(r.val);
    return r;

} // lngamma_2_pade

// ----------------------------------------------------------------------------

// series for gammastar(x)
// double-precision for x > 10.0
//
function gammastar_ser(x)
{
    const y   = 1.0 / (x * x);
    const c0  =  1.0 / 12.0;
    const c1  = -1.0 / 360.0;
    const c2  =  1.0 / 1260.0;
    const c3  = -1.0 / 1680.0;
    const c4  =  1.0 / 1188.0;
    const c5  = -691.0 / 360360.0;
    const c6  =  1.0 / 156.0;
    const c7  = -3617.0 / 122400.0;
    const ser = c0 + y*(c1 + y*(c2 + y*(c3 + y*(c4 + y*(c5 + y*(c6 + y*c7))))));

    var r = { val: 0.0, err: 0.0 }; // Result;

    // Use the Stirling series for the correction to Log(Gamma(x)),
    // which is better behaved and easier to compute than the
    // regular Stirling series for Gamma(x). 
    r.val = Math.exp(ser / x);
    r.err = 2.0 * GSL_DBL_EPSILON * r.val * Math.max(1.0, ser / x);
    return r;

} // gammastar_ser

// ----------------------------------------------------------------------------

// Chebyshev expansion for log(gamma(x)/gamma(8))
// 5 < x < 10
// -1 < t < 1
const gamma_5_10_data =//: CONSTANT Series(0..23) = --[24]
    [
   -1.5285594096661578881275075214,
    4.8259152300595906319768555035,
    0.2277712320977614992970601978,
   -0.0138867665685617873604917300,
    0.0012704876495201082588139723,
   -0.0001393841240254993658962470,
    0.0000169709242992322702260663,
   -2.2108528820210580075775889168e-06,
    3.0196602854202309805163918716e-07,
   -4.2705675000079118380587357358e-08,
    6.2026423818051402794663551945e-09,
   -9.1993973208880910416311405656e-10,
    1.3875551258028145778301211638e-10,
   -2.1218861491906788718519522978e-11,
    3.2821736040381439555133562600e-12,
   -5.1260001009953791220611135264e-13,
    8.0713532554874636696982146610e-14,
   -1.2798522376569209083811628061e-14,
    2.0417711600852502310258808643e-15,
   -3.2745239502992355776882614137e-16,
    5.2759418422036579482120897453e-17,
   -8.5354147151695233960425725513e-18,
    1.3858639703888078291599886143e-18,
   -2.2574398807738626571560124396e-19
    ];
const gamma_5_10_cs = { length: 23, c: gamma_5_10_data, order: 23, a: -1.0, b: 1.0, order_sp: 11 };

// ----------------------------------------------------------------------------

// gamma(x) for x >= 1/2
// assumes x >= 1/2
//
function gamma_xgthalf(x)
{
    var gamma_8 = 0.0;
    var t       = 0.0;
    var p       = 0.0;
    var e       = 0.0;
    var q       = 0.0;
    var pre     = 0.0;

    var n       = 0;

    var lg    = { val: 0.0, err: 0.0 }; // Result;
    var c     = { val: 0.0, err: 0.0 }; // Result;
    var gstar = { val: 0.0, err: 0.0 }; // Result;
    var r     = { val: 0.0, err: 0.0 }; // Result;
  
    if (x == 0.5)
    {
        r.val = 1.77245385090551602729817;
        r.err = GSL_DBL_EPSILON * r.val;
    }
    else if ((x <= (GSL_SF_FACT_NMAX + 1)) && (x == Math.floor(x)))
    {
        n = Math.trunc(Math.floor(x));
        r.val = fact_table[n - 1].f;
        r.err = GSL_DBL_EPSILON * r.val;
    }
    else if (Math.abs(x - 1.0) < 0.01)
    {
        // Use series for Gamma[1+eps] - 1/(1+eps).
        const eps = x - 1.0;
        const c1 =  0.4227843350984671394;
        const c2 = -0.01094400467202744461;
        const c3 =  0.09252092391911371098;
        const c4 = -0.018271913165599812664;
        const c5 =  0.018004931096854797895;
        const c6 = -0.006850885378723806846;
        const c7 =  0.003998239557568466030;

        r.val = 1.0 / x + eps * (c1 + eps * (c2 + eps * (c3 + eps * (c4 + eps * (c5 + eps * (c6 + eps * c7))))));
        r.err = GSL_DBL_EPSILON;
    }
    else if (Math.abs(x - 2.0) < 0.01)
    {
        // Use series for Gamma[1 + eps].
        const eps = x - 2.0;
        const c1 =  0.4227843350984671394;
        const c2 =  0.4118403304264396948;
        const c3 =  0.08157691924708626638;
        const c4 =  0.07424901075351389832;
        const c5 = -0.00026698206874501476832;
        const c6 =  0.011154045718130991049;
        const c7 = -0.002852645821155340816;
        const c8 =  0.0021039333406973880085;

        r.val = 1.0 + eps * (c1 + eps * (c2 + eps * (c3 + eps * (c4 + eps * (c5 + eps * (c6 + eps * (c7 + eps * c8)))))));
        r.err = GSL_DBL_EPSILON;
    }
    else if (x < 5.0)
    {
        // Exponentiating the logarithm is fine, as
        // long as the exponential is not so large
        // that it greatly amplifies the error.
        lg = lngamma_lanczos(x);
        r.val = Math.exp(lg.val);
        r.err = r.val * (lg.err + 2.0 * GSL_DBL_EPSILON);
    }
    else if (x < 10.0)
    {
        // This is a sticky area. The logarithm
        // is too large and the gammastar series
        // is not good.
        gamma_8 = 5040.0;
        t = (2.0 * x - 15.0) / 5.0;
        c = cheb_eval_e(gamma_5_10_cs, t);
        r.val = Math.exp(c.val) * gamma_8;
        r.err = r.val * c.err;
        r.err = r.err + 2.0 * GSL_DBL_EPSILON * r.val;
    }
    else if (x < GSL_SF_GAMMA_XMAX)
    {
        // We do not want to exponentiate the logarithm
        // if x is large because of the inevitable
        // inflation of the error. So we carefully
        // use pow() and exp() with exact quantities.
        p = x ** (0.5 * x);
        e = Math.exp(-x);
        q = (p * e) * p;
        pre = M_SQRT2 * M_SQRTPI * q / Math.sqrt(x);
        gstar = gammastar_ser(x);
        r.val = pre * gstar.val;
        r.err = (x + 2.5) * GSL_DBL_EPSILON * r.val;
    }
    else
    {
        throw "SF.OverflowException";
    }

    return r;

} // gamma_xgthalf

//*-*-*-*-*-*-*-*-*-*-*-* Functions with Error Codes *-*-*-*-*-*-*-*-*-*-*-*

export function gsl_sf_lngamma_e(x)
{
    var n    = 0;
    var sgn  = 0.0;
    var z    = 0.0;
    var s    = 0.0;
    var as1  = 0.0;
    var eps  = 0.0;
    var lg_z = { val: 0.0, err: 0.0 }; // Result;
    var r    = { val: 0.0, err: 0.0 }; // Result;
    var rs   = { val: 0.0, err: 0.0, sign: 0.0 };

    const INT_MIN = -2147483648;

    if (Math.abs(x - 1.0) < 0.01)
    {
        // Note that we must amplify the errors
        // from the Pade evaluations because of
        // the way we must pass the argument, i.e.
        // writing (1-x) is a loss of precision
        // when x is near 1.

        r = lngamma_1_pade(x - 1.0);
        r.err = r.err * 1.0 / (GSL_DBL_EPSILON + Math.abs(x - 1.0));
    }
    else if (Math.abs(x - 2.0) < 0.01)
    {
        r = lngamma_2_pade(x - 2.0);
        r.err = r.err * 1.0 / (GSL_DBL_EPSILON + Math.abs(x - 2.0));
    }
    else if (x >= 0.5)
    {
        r = lngamma_lanczos(x);
    }
    else if (x == 0.0)
    {
        throw "SF.DomainException";
    }
    else if (Math.abs(x) < 0.02)
    {
        rs = lngamma_sgn_0(x); //, r, sgn);
        r.val = rs.val;
        r.err = rs.err;
        sgn = rs.sign;
    }
    else if (x > -0.5 / (GSL_DBL_EPSILON * M_PI))
    {
        // Try to extract a fractional
        // part from x.
        z  = 1.0 - x;
        s  = Math.sin(M_PI * z);
        as1 = Math.abs(s);
        if (s == 0.0)
        {
            throw "SF.DomainException";
        }
        else if (as1 < M_PI * 0.015)
        {
            // x is near a negative integer, -N
            //if (x < LONG_FLOAT(INTEGER'First) + 2.0)
            if (x < INT_MIN + 2.0)
            {
                throw "SF.RoundoffException";
            }
            else
            {
                n = -Math.trunc(x - 0.5);
                eps = x + (n);
                rs = lngamma_sgn_sing(n, eps); //, r, sgn);
                r.val = rs.val;
                r.err = rs.err;
                sgn = rs.sign;
            }
        }
        else
        {
            lg_z = lngamma_lanczos(z);
            r.val = M_LNPI - (Math.log(as1) + lg_z.val);
            r.err = 2.0 * GSL_DBL_EPSILON * Math.abs(r.val) + lg_z.err;
        }
    }
    else
    {
        // |x| was too large to extract any fractional part
        throw "SF.RoundoffException";
    }

    return r;

} // gsl_sf_lngamma_e

// ----------------------------------------------------------------------------

export function gsl_sf_lngamma_sgn_e(x) //, result_lg, sgn)
{
    var z   = 0.0;
    var s   = 0.0;
    var as  = 0.0;
    var eps = 0.0;
    var sgn = 0.0;

    var N    = 0;
    var stat = 0;

    var lg_z = { val: 0.0, err: 0.0 }; // Result;
    var result_lg = { val: 0.0, err: 0.0 }; // Result;
    var r    = { val: 0.0, err: 0.0, sign: 0.0 }; // Result;

    if (Math.abs(x - 1.0) < 0.01)
    {
        result_lg = lngamma_1_pade(x - 1.0);
        result_lg.err = result_lg.err * (1.0 / (GSL_DBL_EPSILON + Math.abs(x - 1.0)));
        sgn = 1.0;

        r.val = result_lg.val;
        r.err = result_lg.err;
        r.sign = sgn;
    }
    else if (Math.abs(x - 2.0) < 0.01)
    {
        result_lg = lngamma_2_pade(x - 2.0);
        result_lg.err = result_lg.err * (1.0 / (GSL_DBL_EPSILON + Math.abs(x - 2.0)));
        sgn = 1.0;

        r.val = result_lg.val;
        r.err = result_lg.err;
        r.sign = sgn;
    }
    else if (x >= 0.5)
    {
        sgn = 1.0;
        result_lg = lngamma_lanczos(x);

        r.val = result_lg.val;
        r.err = result_lg.err;
        r.sign = sgn;
    }
    else if (x == 0.0)
    {
        //sgn = 0.0;
        throw "SF.DomainException";
    }
    else if (Math.abs(x) < 0.02)
    {
        r = lngamma_sgn_0(x); //, result_lg, sgn);
    }
    else if (x > -0.5 / (GSL_DBL_EPSILON * M_PI))
    {
        // Try to extract a fractional
        // part from x.
        z = 1.0 - x;
        s = Math.sin(M_PI * x);
        as = Math.abs(s);
        if (s == 0.0)
        {
            //sgn = 0.0;
            throw "SF.DomainException";
        }
        else if (as < M_PI * 0.015)
        {
            // x is near a negative integer, -N
            if (x < INT_MIN + 2)
            {
                //result_lg.val = 0.0;
                //result_lg.err = 0.0;
                //sgn = 0.0;
                //GSL_ERROR("error", GSL_EROUND);
                throw "SF.RoundoffException";
            }
            else
            {
                N = -Math.trunc(x - 0.5);
                eps = x + (N);
                r = lngamma_sgn_sing(N, eps); //, result_lg, sgn);
            }
        }
        else
        {
            lg_z = lngamma_lanczos(z);
            if (s > 0.0)
            {
                sgn = 1.0;
            }
            else
            {
                sgn = -1.0;
            }
            result_lg.val = M_LNPI - (Math.log(as) + lg_z.val);
            result_lg.err = 2.0 * GSL_DBL_EPSILON * Math.abs(result_lg.val) + lg_z.err;

            r.val = result_lg.val;
            r.err = result_lg.err;
            r.sign = sgn;
        }
    }
    else
    {
        // |x| was too large to extract any fractional part
        //result_lg.val = 0.0;
        //result_lg.err = 0.0;
        //sgn = 0.0;
        //GSL_ERROR("x too large to extract fraction part", GSL_EROUND);
        throw "SF.RoundoffException"; // WITH "x too large to extract fraction part";
    }

    return r;

} // gsl_sf_lngamma_sgn_e

// ----------------------------------------------------------------------------

export function gsl_sf_gamma_e(x)
{
    var rint_x    = 0;
    var stat_lng  = 0;
    var stat_e    = 0;

    var f_x       = 0.0;
    var sgn_gamma = 0.0;
    var sgn       = 0.0;
    var sin_term  = 0.0;

    var r         = { val: 0.0, err: 0.0 }; // Result;
    var g         = { val: 0.0, err: 0.0 }; // Result;
    var lng       = { val: 0.0, err: 0.0 }; // Result;

    if (x < 0.5)
    {
        rint_x = Math.floor(x + 0.5);
        f_x = x - rint_x;
        if (GSL_IS_EVEN(rint_x))
        {
            sgn_gamma = 1.0;
        }
        else
        {
            sgn_gamma = -1.0;
        }
        sin_term = sgn_gamma * Math.sin(M_PI * f_x) / M_PI;
       
        if (sin_term == 0.0)
        {
            throw "SF.DomainException";
        }
        else if (x > -169.0)
        {
            g = gamma_xgthalf(1.0 - x);
            if (Math.abs(sin_term) * g.val * GSL_DBL_MIN < 1.0)
            {
                r.val = 1.0 / (sin_term * g.val);
                r.err = Math.abs(g.err/g.val) * Math.abs(r.val);
                r.err = r.err + 2.0 * GSL_DBL_EPSILON * Math.abs(r.val);
            }
            else
            {
                throw "SF.UnderflowException";
            }
        }
        else
        {
            // It is hard to control it here.
            // We can only exponentiate the
            // logarithm and eat the loss of
            // precision.
            //gsl_sf_lngamma_sgn_e(stat_lng, x, lng, sgn);
            r = gsl_sf_exp_mult_err_e(lng.val, lng.err, sgn, 0.0);
        }
    }
    else
    {
        r = gamma_xgthalf(x);
    }

    return r;

} // gsl_sf_gamma_e

// ----------------------------------------------------------------------------

export function gsl_sf_gammastar_e(x)
{
    var t  = 0.0;
    var lx = 0.0;
    var c1 = 0.0;
    var xi = 0.0;
    var lnr_val = 0.0;
    var lnr_err = 0.0;

    var lg = { val: 0.0, err: 0.0 }; // Result;
    var c  = { val: 0.0, err: 0.0 }; // Result;
    var r  = { val: 0.0, err: 0.0 }; // Result;
  
    if (x <= 0.0)
    {
        throw "SF.DomainException";
    }
    else if (x < 0.5)
    {
        lg = gsl_sf_lngamma_e(x);
        lx = Math.log(x);
        c1 = 0.5 * (M_LN2 + M_LNPI);
        lnr_val = lg.val - (x - 0.5) * lx + x - c1;
        lnr_err = lg.err + 2.0 * GSL_DBL_EPSILON *((x + 0.5) * Math.abs(lx) + c1);
        r = gsl_sf_exp_err_e(lnr_val, lnr_err);
    }
    else if (x < 2.0)
    {
        t = 4.0 / 3.0 * (x - 0.5) - 1.0;
        r = cheb_eval_e(gstar_a_cs, t);
    }
    else if (x < 10.0)
    {
        t = 0.25 * (x - 2.0) - 1.0;
        c = cheb_eval_e(gstar_b_cs, t);
        r.val = c.val / (x * x) + 1.0 + 1.0 / (12.0 * x);
        r.err = c.err / (x * x);
        r.err = r.err + 2.0 * GSL_DBL_EPSILON * Math.abs(r.val);
    }
    else if (x < 1.0 / GSL_ROOT4_DBL_EPSILON)
    {
        r = gammastar_ser(x);
    }
    else if (x < 1.0/GSL_DBL_EPSILON)
    {
        // Use Stirling formula for Gamma(x).
        xi = 1.0 / x;
        r.val = 1.0 + xi / 12.0 * (1.0 + xi / 24.0 * (1.0 - xi * (139.0 / 180.0 + 571.0 / 8640.0 * xi)));
        r.err = 2.0 * GSL_DBL_EPSILON * Math.abs(r.val);
    }
    else
    {
        r.val = 1.0;
        r.err = 1.0 / x;
    }

    return r;

} // gsl_sf_gammastar_e

// ----------------------------------------------------------------------------

export function gsl_sf_gammainv_e(x)
{
    var sgn = 0.0;

    var lng = { val: 0.0, err: 0.0, sign: 0.0 }; // Result;
    var g   = { val: 0.0, err: 0.0 }; // Result;
    var r   = { val: 0.0, err: 0.0 }; // Result;
  
    if ((x <= 0.0) && (x == Math.floor(x))) // negative integer
    {
        r.val = 0.0;
        r.err = 0.0;
    }
    else if (x < 0.5)
    {
        lng = gsl_sf_lngamma_sgn_e(x); //, lng, sgn);
        r = gsl_sf_exp_mult_err_e(-lng.val, lng.err, lng.sign, 0.0);
    }
    else
    {
        g = gamma_xgthalf(x);
        r.val = 1.0 / g.val;
        r.err = Math.abs(g.err/g.val) * Math.abs(r.val);
        r.err = r.err + 2.0 * GSL_DBL_EPSILON * Math.abs(r.val);
        //CHECK_UNDERFLOW(result);
    }

    return r;

} // gsl_sf_gammainv_e

// ----------------------------------------------------------------------------

export function gsl_sf_lngamma_complex_e( zr, zi, /* in out */ lnr, /* in out */ arg )
{ // gsl_sf_lngamma_complex_e

    if ( zr <= 0.5 )
    {
        // Transform to right half plane using reflection;
        // in fact we do a little better by stopping at 1/2.
        //
        var x = 1.0 - zr;
        var y = -zi;
        var a = { val: 0.0, err: 0.0 }; // Result;
        var b = { val: 0.0, err: 0.0 }; // Result;
        var lnsin_r = { val: 0.0, err: 0.0 }; // Result;
        var lnsin_i = { val: 0.0, err: 0.0 }; // Result;

        lngamma_lanczos_complex( x, y, a, b );
        gsl_sf_complex_logsin_e( M_PI * zr, M_PI * zi, lnsin_r, lnsin_i );
        
        lnr.val = M_LNPI - lnsin_r.val - a.val;
        lnr.err = lnsin_r.err + a.err + 2.0 * GSL_DBL_EPSILON * Math.abs( lnr.val );
        arg.val = -lnsin_i.val - b.val;
        arg.err = lnsin_i.err + b.err + 2.0 * GSL_DBL_EPSILON * Math.abs( arg.val );
        arg.val = gsl_sf_angle_restrict_symm_e( arg.val );
    }
    else
    {
        // otherwise plain vanilla Lanczos
        lngamma_lanczos_complex( zr, zi, lnr, arg );
    }

 } // gsl_sf_lngamma_complex_e

// ----------------------------------------------------------------------------

export function gsl_sf_taylorcoeff_e(n, x)
{
    var r = { val: 0.0, err: 0.0 }; // Result;
  
    if ((x < 0.0) || (n < 0))
    {
        throw "SF.DomainException";
    }
    else if (n == 0)
    {
        r.val = 1.0;
        r.err = 0.0;
    }
    else if (n == 1)
    {
        r.val = x;
        r.err = 0.0;
    }
    else if (x == 0.0)
    {
        r.val = 0.0;
        r.err = 0.0;
    }
    else
    {
        var log2pi  = M_LNPI + M_LN2;
        var ln_test = (n) * (Math.log(x) + 1.0) + 1.0 - ((n) + 0.5) * Math.log((n) + 1.0) + 0.5 * log2pi;
        var product = 0.0;
        var k = 0;

        if (ln_test < GSL_LOG_DBL_MIN + 1.0)
        {
            throw "SF.UnderflowException";
        }
        else if (ln_test > GSL_LOG_DBL_MAX - 1.0)
        {
            throw "SF.OverflowException";
        }
        else
        {
            product = 1.0;
            for (k = 1; k <= n; k++)
            {
                product = product * (x / (k));
            }
            r.val = product;
            r.err = (n) * GSL_DBL_EPSILON * product;
            //CHECK_UNDERFLOW(result);
        }
    }

    return r;

} // gsl_sf_taylorcoeff_e

// ----------------------------------------------------------------------------

export function gsl_sf_fact_e(n)
{
    var r = { val: 0.0, err: 0.0 }; // Result;

  
    if (n < 18)
    {
        r.val = fact_table[n].f;
        r.err = 0.0;
    }
    else if (n <= GSL_SF_FACT_NMAX)
    {
        r.val = fact_table[n].f;
        r.err = 2.0 * GSL_DBL_EPSILON * Math.abs(r.val);
    }
    else
    {
        throw "SF.OverflowException";
    }

    return r;

} // gsl_sf_fact_e

// ----------------------------------------------------------------------------

export function gsl_sf_doublefact_e(n)
{
    var r = { val: 0.0, err: 0.0 }; // Result;

  
    if (n < 26)
    {
        r.val = doub_fact_table[n].f;
        r.err = 0.0;
    }
    else if (n <= GSL_SF_DOUBLEFACT_NMAX)
    {
        r.val = doub_fact_table[n].f;
        r.err = 2.0 * GSL_DBL_EPSILON * Math.abs(r.val);
    }
    else
    {
        throw "SF.OverflowException";
    }

    return r;

} // gsl_sf_doublefact_e

// ----------------------------------------------------------------------------

export function gsl_sf_lnfact_e(n)
{
    var r = { val: 0.0, err: 0.0 }; // Result;

    if (n <= GSL_SF_FACT_NMAX)
    {
        r.val = Math.log(fact_table[n].f);
        r.err = 2.0 * GSL_DBL_EPSILON * Math.abs(r.val);
    }
    else
    {
        r = gsl_sf_lngamma_e((n) + 1.0);
    }

    return r;

} // gsl_sf_lnfact_e

// ----------------------------------------------------------------------------

export function gsl_sf_lndoublefact_e(n)
{
    var lg = { val: 0.0, err: 0.0 }; // Result;
    var r  = { val: 0.0, err: 0.0 }; // Result;
  
    if (n <= GSL_SF_DOUBLEFACT_NMAX)
    {
        r.val = Math.log(doub_fact_table[n].f);
        r.err = 2.0 * GSL_DBL_EPSILON * Math.abs(r.val);
    }
    else if (GSL_IS_ODD(n))
    {
        lg = gsl_sf_lngamma_e(0.5 * (n + 2));
        r.val = 0.5 * (n + 1) * M_LN2 - 0.5 * M_LNPI + lg.val;
        r.err = 2.0 * GSL_DBL_EPSILON * Math.abs(r.val) + lg.err;
    }
    else
    {
        lg = gsl_sf_lngamma_e(0.5 * (n) + 1.0);
        r.val = 0.5 * (n) * M_LN2 + lg.val;
        r.err = 2.0 * GSL_DBL_EPSILON * Math.abs(r.val) + lg.err;
    }

    return r;

} // gsl_sf_lndoublefact_e

// ----------------------------------------------------------------------------

export function gsl_sf_lnchoose_e(n, m)
{
    var r = { val: 0.0, err: 0.0 }; // Result;

  
    if (m > n)
    {
        throw "SF.DomainException";
    }
    else if ((m == n) || (m == 0))
    {
        r.val = 0.0;
        r.err = 0.0;
    }
    else
    {
        var nf   = { val: 0.0, err: 0.0 }; // Result;
        var mf   = { val: 0.0, err: 0.0 }; // Result;
        var nmmf = { val: 0.0, err: 0.0 }; // Result;
        var m1   = m;

        if (m * 2 > n)
        {
            m1 = n - m;
        }
        nf = gsl_sf_lnfact_e(n);
        mf = gsl_sf_lnfact_e(m1);
        nmmf = gsl_sf_lnfact_e(n - m1);
        r.val = nf.val - mf.val - nmmf.val;
        r.err = nf.err + mf.err + nmmf.err;
        r.err = r.err + 2.0 * GSL_DBL_EPSILON * Math.abs(r.val);
    }

    return r;

} // gsl_sf_lnchoose_e

// ----------------------------------------------------------------------------

export function gsl_sf_choose_e(n, m)
{
    var m1   = 0;
    var k    = 0;

    var prod = 0.0;
    var tk   = 0.0;

    var lc = { val: 0.0, err: 0.0 }; // Result;
    var r  = { val: 0.0, err: 0.0 }; // Result;

    if (m > n)
    {
        throw "SF.DomainException";
    }
    else if ((m == n) || (m == 0))
    {
        r.val = 1.0;
        r.err = 0.0;
    }
    else if (n <= GSL_SF_FACT_NMAX)
    {
        r.val = (fact_table[n].f / fact_table[m].f) / fact_table[n-m].f;
        r.err = 6.0 * GSL_DBL_EPSILON * Math.abs(r.val);
    }
    else
    {
        m1 = m;
        if (m * 2 < n)
        {
            m1 = n - m;
        }
       
        if (n - m1 < 64) // compute product for a manageable number of terms
        {
            prod = 1.0;
            for (k = n; k >= m1 + 1; k--)
            {
                tk = (k) / (k - m1);
                if (tk > GSL_DBL_MAX / prod)
                {
                    throw "SF.OverflowException";
                }
                prod = prod * tk;
            }
            r.val = prod;
            r.err = 2.0 * GSL_DBL_EPSILON * prod * (Math.abs(n - m1));
        }
        else
        {
            lc = gsl_sf_lnchoose_e(n, m1);
            r = gsl_sf_exp_err_e(lc.val, lc.err);
        }
    }

    return r;

} // gsl_sf_choose_e

//*-*-*-*-*-*-*-*-*-* Functions w/ Natural Prototypes *-*-*-*-*-*-*-*-*-*-*

export function gsl_sf_fact( n )
{ // gsl_sf_fact
    return EVAL_RESULT_I( gsl_sf_fact_e, n, "gsl_sf_fact" );
} // gsl_sf_fact

export function gsl_sf_lnfact( n )
{ // gsl_sf_lnfact
    return EVAL_RESULT_I( gsl_sf_lnfact_e, n, "gsl_sf_lnfact" );
} // gsl_sf_lnfact

export function gsl_sf_doublefact( n )
{ // gsl_sf_doublefact
    return EVAL_RESULT_I( gsl_sf_doublefact_e, n, "gsl_sf_doublefact" );
} // gsl_sf_doublefact

export function gsl_sf_lndoublefact( n )
{ // gsl_sf_lndoublefact
    return EVAL_RESULT_I( gsl_sf_lndoublefact_e, n, "gsl_sf_lndoublefact" );
} // gsl_sf_lndoublefact

export function gsl_sf_lngamma( x )
{ // gsl_sf_lngamma
    return EVAL_RESULT_D( gsl_sf_lngamma_e, x, "gsl_sf_lngamma" );
} // gsl_sf_lngamma

export function gsl_sf_gamma( x )
{ //  gsl_sf_gamma
    return EVAL_RESULT_D( gsl_sf_gamma_e, x, "gsl_sf_gamma" );
} // gsl_sf_gamma

export function gsl_sf_gammastar( x )
{ // gsl_sf_gammastar
    return EVAL_RESULT_D( gsl_sf_gammastar_e, x, "gsl_sf_gammastar" );
} // gsl_sf_gammastar

export function gsl_sf_gammainv( x )
{ // gsl_sf_gammainv
    return EVAL_RESULT_D( gsl_sf_gammainv_e, x, "gsl_sf_gammainv" );
} // gsl_sf_gammainv

export function gsl_sf_taylorcoeff( n, x )
{ // gsl_sf_taylorcoeff
    return EVAL_RESULT_ID( gsl_sf_taylorcoeff_e, { i: n, x: x }, "gsl_sf_taylorcoeff" );
} // gsl_sf_taylorcoeff;

export function gsl_sf_choose( n, m )
{ // gsl_sf_choose
    return EVAL_RESULT_II( gsl_sf_choose_e, { n: n, m: m }, "gsl_sf_choose" );
} // gsl_sf_choose;

export function gsl_sf_lnchoose( n, m )
{ // gsl_sf_lnchoose
    return EVAL_RESULT_II( gsl_sf_lnchoose_e, { n: n, m: m }, "gsl_sf_lnchoose" );
} // gsl_sf_lnchoose;

// ----------------------------------------------------------------------------
// EOF SF-Gamma.mjs
